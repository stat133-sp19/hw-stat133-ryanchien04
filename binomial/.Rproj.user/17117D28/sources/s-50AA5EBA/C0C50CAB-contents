---
title: "Warmup05-Ryan-Chien.Rmd"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
```

##Gaussian Function
```{r}
#' @title Gaussian function
#' @description computes the probability density based off a normal distribution
#' @param x numeric vector for independent Gaussian variable x (default is 0)
#' @param m numeric vector for the mean/expectation of normal distribution (default is 0)
#' @param s numeric vector for the standard deviation (default is 1)
#' @return the computed probability density
gaussian <- function(x=0, m=0, s=1) {
  if (s <= 0) {
    stop('s must be greater than zero')
  }
  density <- 1 / (s * sqrt(2 * pi)) * exp(-1/2 * ((x - m) / s)^2)
  return(density)
}

#test set 1
gaussian(x = 0, m = 0, s = 1)
gaussian(x = 1, m = 0, s = 2)

#test set 2
gaussian(x = 1, m = 0, s = 0)
gaussian(x = 1, m = 0, s = -1)

# gaussian curve
x_values <- seq(from = -4.5, to = 4.5, by = 0.1)
y_values <- gaussian(x_values, m = 0, s = 2)
plot(x_values, y_values, las = 1, type = "l", lwd = 2)

#plot replication
x_axis <- seq(from = -5, to = 5, by = 0.1)
curve_1 <- gaussian(x = x_values, m = 0, s = sqrt(0.2))
curve_2 <- gaussian(x = x_values, m = 0, s = sqrt(1))
curve_3 <- gaussian(x = x_values, m = 0, s = sqrt(5))
curve_4 <- gaussian(x = x_values, m = -2, s = sqrt(0.5))

plot(x_values, curve_1, ylim = c(0, 1.0), type = "l", main="Figure 1: Normal probability density functions", xlab = expression(paste(chi)), ylab = expression(paste(phi[paste(mu, ",", sigma^2)], (chi))), las = 1, lwd = 2, col="#000080")
lines(x_values, curve_2, type = "l", lwd = 2, col="#DC143C")
lines(x_values, curve_3, type = "l", lwd = 2, col="#B8860B")
lines(x_values, curve_4, type = "l", lwd = 2, col="#008000")
legend(1.5, 0.8, legend=c(expression(paste(mu, '= 0, ', sigma^2, '= 0.2')), expression(paste(mu, '= 0, ', sigma^2, '= 1.0')), expression(paste(mu, '= 0, ', sigma^2, '= 5.0')), expression(paste(mu, '= -2, ', sigma^2, '= 0.5'))), col = c('blue', 'red', 'orange', 'green'), lty = 1)
```

##Decriptive Statistics
```{r}
#' @title descriptive statistics
#' @description takes in a numeric vector x and a logical value on whether or not to remove missing values before computation and should return a named vector with computed summary statistics
#' @param x numeric vector for variable x (default is 0)
#' @param na.rm whether to remove missing values before computations (default is FALSE)
#' @return a named vector with the following descriptive statistics: minimum, quartile 1, median, mean, quartile 3, maximum, range, interquartile range, standard deviation
descriptive <- function(x=0, na.rm=FALSE) {
  if (typeof(x) != 'double') {
    stop('the input vector x is not numeric')
  }
  descriptive_statistics <- c(min(x, na.rm = na.rm), quantile(x, 0.25, na.rm = na.rm), median(x, na.rm = na.rm), mean(x, na.rm = na.rm), quantile(x, 0.75, na.rm = na.rm), max(x, na.rm = na.rm), max(x, na.rm = na.rm) - min(x, na.rm = na.rm), IQR(x, na.rm = na.rm), sd(x, na.rm = na.rm))
  names(descriptive_statistics) <- c("min", "q1", "median", "mean", "q3", "max", "range", "iqr", "sd")
  return(descriptive_statistics)
}
# input vectors
set.seed(100)
x <- rnorm(100)
y <- x
y[sample(1:100, size = 10)] <- NA

# test set 1
descriptive(x)
descriptive(y)
descriptive(y, na.rm = TRUE)
descriptive(letters)

# test set 2
a <- descriptive(x)
class(a)
length(a)
names(a)
```

##Minkowski Distance
```{r}
#' @title Minkowski distance
#' @description calculates the Minkowski distance between a point x (x1 to xn) and a point y(y1 to yn) of order p (p-norm distance)
#' @param x numeric vector for the starting point
#' @param y numeric vector for the ending point
#' @param p the order of Minkowski distance, either a numeric value greater than 1, or a character string "max" (default 1)
#' @return the computed Minkowski distance between the two points
minkowski <- function(x, y, p = 1) {
  if (length(x) != length(y)) {
    stop("x and y have different lengths")
  } else if (class(p) == "numeric" & p < 1) {
    stop("p cannot be less than 1")
  } else if (class(p) == "character" & p != "max") {
    stop("invalid character value for p")
  } else if (class(p) == "numeric" & p >= 1) {
    return(sum((abs(x - y))^p)^(1/p))
  } else if (class(p) == "character" & p == "max") {
    return(max(abs(x - y)))
  }
}

# some points
point1 <- c(0, 0)
point2 <- c(1, 1)
point3 <- sqrt(c(2, 2))
point4 <- c(0, 1)
point5 <- c(1, 1, 1)

# test set 1
minkowski(point1, point2, p = 1)
minkowski(point1, point3, p = 2)
minkowski(point1, point2, p = 'max')

# test set 2
minkowski(point4, point5, p = 1)
minkowski(point1, point2, p = 0.5)
minkowski(point1, point2, p = 'min')
```

